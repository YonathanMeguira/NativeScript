"use strict";
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var UID_Provider_1 = require("../../shared/UID.Provider");
var List = (function () {
    function List(UIDProvider) {
        this.UIDProvider = UIDProvider;
        this.NewItem = "";
        this.ToDoList = [];
        this.UID = this.UIDProvider.UID;
        console.log(this.UID);
        this.FirebaseUrl = "users/" + this.UID;
    }
    List.prototype.ngOnInit = function () {
        var _this = this;
        var onQueryEvent = function (result) {
            // note that the query returns 1 match at a time
            // in the order specified in the query
            if (!result.error) {
                console.log("Event type: " + result.type);
                console.log("Key: " + result.key);
                console.log(result.value);
                for (var i in result.value.task) {
                    _this.ToDoList.push(result.value.task[i]);
                }
                return _this.ToDoList;
            }
        };
        console.log("queried");
        firebase.query(onQueryEvent, this.FirebaseUrl, {
            singleEvent: true,
            orderBy: {
                type: firebase.QueryOrderByType.KEY
            },
        });
    };
    List.prototype.AddItemToList = function () {
        var _this = this;
        if (this.ToDoList.some(function (x) { return x === _this.NewItem; })) {
            alert("your to do list already contains this task");
        }
        else if (this.NewItem === "") {
            alert("new task can not be nul");
        }
        else {
            this.ToDoList.push(this.NewItem);
            console.log(this.FirebaseUrl);
            firebase.update(this.FirebaseUrl, { task: this.ToDoList });
            this.NewItem = "";
        }
    };
    List.prototype.RemoveItemFromList = function (item) {
        var index = this.ToDoList.indexOf(item);
        this.ToDoList.splice(index, 1);
        firebase.update(this.FirebaseUrl, { task: this.ToDoList });
    };
    List = __decorate([
        core_1.Component({
            selector: "List",
            templateUrl: "pages/list/list.html",
            styleUrls: ['pages/list/style.css']
        }), 
        __metadata('design:paramtypes', [UID_Provider_1.UIDProvider])
    ], List);
    return List;
}());
exports.List = List;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUFrQyxlQUFlLENBQUMsQ0FBQTtBQUNsRCxJQUFPLFFBQVEsV0FBVyw4QkFBOEIsQ0FBQyxDQUFDO0FBRTFELDZCQUE0QiwyQkFBMkIsQ0FBQyxDQUFBO0FBV3hEO0lBU0ksY0FBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFQckMsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUdiLGFBQVEsR0FBZSxFQUFFLENBQUM7UUFNN0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBRTNDLENBQUM7SUFHRCx1QkFBUSxHQUFSO1FBQUEsaUJBNkJDO1FBM0JHLElBQUksWUFBWSxHQUFHLFVBQUMsTUFBTTtZQUN0QixnREFBZ0Q7WUFDaEQsc0NBQXNDO1lBRXRDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQTtnQkFDekIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUM5QixLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUM1QyxDQUFDO2dCQUNELE1BQU0sQ0FBQyxLQUFJLENBQUMsUUFBUSxDQUFDO1lBQ3pCLENBQUM7UUFDTCxDQUFDLENBQUM7UUFFRixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3RCLFFBQVEsQ0FBQyxLQUFLLENBQ1YsWUFBWSxFQUNaLElBQUksQ0FBQyxXQUFXLEVBQ2hCO1lBQ0ksV0FBVyxFQUFFLElBQUk7WUFDakIsT0FBTyxFQUFFO2dCQUNMLElBQUksRUFBRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRzthQUN0QztTQUVKLENBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCw0QkFBYSxHQUFiO1FBQUEsaUJBMkJDO1FBekJHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxLQUFLLEtBQUksQ0FBQyxPQUFPLEVBQWxCLENBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFOUMsS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUE7UUFFdkQsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFN0IsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7UUFFcEMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBRUosSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBRWhDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBRTdCLFFBQVEsQ0FBQyxNQUFNLENBRVgsSUFBSSxDQUFDLFdBQVcsRUFFaEIsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUUxQixDQUFDO1lBRUYsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFFdEIsQ0FBQztJQUNMLENBQUM7SUFDRCxpQ0FBa0IsR0FBbEIsVUFBbUIsSUFBSTtRQUNuQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsUUFBUSxDQUFDLE1BQU0sQ0FDWCxJQUFJLENBQUMsV0FBVyxFQUNoQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQzFCLENBQUM7SUFDTixDQUFDO0lBNUZMO1FBQUMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLFdBQVcsRUFBRSxzQkFBc0I7WUFDbkMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLENBQUM7U0FDdEMsQ0FBQzs7WUFBQTtJQXlGRixXQUFDO0FBQUQsQ0FBQyxBQXJGRCxJQXFGQztBQXJGWSxZQUFJLE9BcUZoQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5pbXBvcnQgeyBVSURQcm92aWRlciB9IGZyb20gXCIuLi8uLi9zaGFyZWQvVUlELlByb3ZpZGVyXCI7XG5cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiTGlzdFwiLFxuICAgIHRlbXBsYXRlVXJsOiBcInBhZ2VzL2xpc3QvbGlzdC5odG1sXCIsXG4gICAgc3R5bGVVcmxzOiBbJ3BhZ2VzL2xpc3Qvc3R5bGUuY3NzJ11cbn0pXG5cblxuXG5leHBvcnQgY2xhc3MgTGlzdCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgICBwdWJsaWMgTmV3SXRlbSA9IFwiXCI7XG4gICAgcHVibGljIFVJRDtcbiAgICBwdWJsaWMgRmlyZWJhc2VVcmw6IHN0cmluZztcbiAgICBwdWJsaWMgVG9Eb0xpc3Q6IEFycmF5PGFueT4gPSBbXTtcblxuXG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIFVJRFByb3ZpZGVyOiBVSURQcm92aWRlcikge1xuXG4gICAgICAgIHRoaXMuVUlEID0gdGhpcy5VSURQcm92aWRlci5VSUQ7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuVUlEKTtcbiAgICAgICAgdGhpcy5GaXJlYmFzZVVybCA9IFwidXNlcnMvXCIgKyB0aGlzLlVJRDtcblxuICAgIH1cblxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgdmFyIG9uUXVlcnlFdmVudCA9IChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIC8vIG5vdGUgdGhhdCB0aGUgcXVlcnkgcmV0dXJucyAxIG1hdGNoIGF0IGEgdGltZVxuICAgICAgICAgICAgLy8gaW4gdGhlIG9yZGVyIHNwZWNpZmllZCBpbiB0aGUgcXVlcnlcblxuICAgICAgICAgICAgaWYgKCFyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkV2ZW50IHR5cGU6IFwiICsgcmVzdWx0LnR5cGUpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiS2V5OiBcIiArIHJlc3VsdC5rZXkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdC52YWx1ZSlcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpIGluIHJlc3VsdC52YWx1ZS50YXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuVG9Eb0xpc3QucHVzaChyZXN1bHQudmFsdWUudGFza1tpXSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuVG9Eb0xpc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJxdWVyaWVkXCIpXG4gICAgICAgIGZpcmViYXNlLnF1ZXJ5KFxuICAgICAgICAgICAgb25RdWVyeUV2ZW50LFxuICAgICAgICAgICAgdGhpcy5GaXJlYmFzZVVybCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5nbGVFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvcmRlckJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpcmViYXNlLlF1ZXJ5T3JkZXJCeVR5cGUuS0VZXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIEFkZEl0ZW1Ub0xpc3QoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuVG9Eb0xpc3Quc29tZSh4ID0+IHggPT09IHRoaXMuTmV3SXRlbSkpIHtcblxuICAgICAgICAgICAgYWxlcnQoXCJ5b3VyIHRvIGRvIGxpc3QgYWxyZWFkeSBjb250YWlucyB0aGlzIHRhc2tcIilcblxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuTmV3SXRlbSA9PT0gXCJcIikge1xuXG4gICAgICAgICAgICBhbGVydChcIm5ldyB0YXNrIGNhbiBub3QgYmUgbnVsXCIpXG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy5Ub0RvTGlzdC5wdXNoKHRoaXMuTmV3SXRlbSlcblxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5GaXJlYmFzZVVybClcblxuICAgICAgICAgICAgZmlyZWJhc2UudXBkYXRlKFxuXG4gICAgICAgICAgICAgICAgdGhpcy5GaXJlYmFzZVVybCxcblxuICAgICAgICAgICAgICAgIHsgdGFzazogdGhpcy5Ub0RvTGlzdCB9XG5cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuTmV3SXRlbSA9IFwiXCI7XG5cbiAgICAgICAgfVxuICAgIH1cbiAgICBSZW1vdmVJdGVtRnJvbUxpc3QoaXRlbSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLlRvRG9MaXN0LmluZGV4T2YoaXRlbSlcbiAgICAgICAgdGhpcy5Ub0RvTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBmaXJlYmFzZS51cGRhdGUoXG4gICAgICAgICAgICB0aGlzLkZpcmViYXNlVXJsLFxuICAgICAgICAgICAgeyB0YXNrOiB0aGlzLlRvRG9MaXN0IH1cbiAgICAgICAgKTtcbiAgICB9XG59Il19