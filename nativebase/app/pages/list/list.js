"use strict";
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var UID_Provider_1 = require("../../shared/UID.Provider");
var List = (function () {
    function List(UIDProvider) {
        this.UIDProvider = UIDProvider;
        this.NewItem = "";
        this.ToDoList = [];
        this.UID = this.UIDProvider.UID;
        console.log(this.UID);
        this.FirebaseUrl = "users/" + this.UID;
    }
    List.prototype.ngOnInit = function () {
        var onQueryEvent = function (result) {
            // note that the query returns 1 match at a time
            // in the order specified in the query
            if (!result.error) {
                console.log("Event type: " + result.type);
                console.log("Key: " + result.key);
                console.log(result.value.task);
            }
        };
        console.log("queried");
        firebase.query(onQueryEvent, this.FirebaseUrl, {
            singleEvent: true,
            orderBy: {
                type: firebase.QueryOrderByType.KEY
            },
        });
    };
    List.prototype.AddItemToList = function () {
        var _this = this;
        if (this.ToDoList.some(function (x) { return x === _this.NewItem; })) {
            alert("your to do list already contains this task");
        }
        else if (this.NewItem === "") {
            alert("new task can not be nul");
        }
        else {
            this.ToDoList.push(this.NewItem);
            console.log(this.FirebaseUrl);
            firebase.update(this.FirebaseUrl, { task: this.ToDoList });
            this.NewItem = "";
        }
    };
    List.prototype.RemoveItemFromList = function (item) {
        var index = this.ToDoList.indexOf(item);
        this.ToDoList.splice(index, 1);
        firebase.update(this.FirebaseUrl, { task: this.ToDoList });
    };
    List = __decorate([
        core_1.Component({
            selector: "List",
            templateUrl: "pages/list/list.html",
            styleUrls: ['pages/list/style.css']
        }), 
        __metadata('design:paramtypes', [UID_Provider_1.UIDProvider])
    ], List);
    return List;
}());
exports.List = List;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUFrQyxlQUFlLENBQUMsQ0FBQTtBQUNsRCxJQUFPLFFBQVEsV0FBVyw4QkFBOEIsQ0FBQyxDQUFDO0FBRTFELDZCQUE0QiwyQkFBMkIsQ0FBQyxDQUFBO0FBV3hEO0lBU0ksY0FBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFQckMsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUdiLGFBQVEsR0FBZSxFQUFFLENBQUM7UUFNN0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBRTNDLENBQUM7SUFHRCx1QkFBUSxHQUFSO1FBRUksSUFBSSxZQUFZLEdBQUcsVUFBQyxNQUFNO1lBQ3RCLGdEQUFnRDtZQUNoRCxzQ0FBc0M7WUFFdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUdsQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUN0QixRQUFRLENBQUMsS0FBSyxDQUNWLFlBQVksRUFDWixJQUFJLENBQUMsV0FBVyxFQUNoQjtZQUNJLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLE9BQU8sRUFBRTtnQkFDTCxJQUFJLEVBQUUsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEdBQUc7YUFDdEM7U0FFSixDQUNKLENBQUM7SUFDTixDQUFDO0lBRUQsNEJBQWEsR0FBYjtRQUFBLGlCQTJCQztRQXpCRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsS0FBSyxLQUFJLENBQUMsT0FBTyxFQUFsQixDQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTlDLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFBO1FBRXZELENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRTdCLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO1FBRXBDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUVKLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUVoQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUU3QixRQUFRLENBQUMsTUFBTSxDQUVYLElBQUksQ0FBQyxXQUFXLEVBRWhCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FFMUIsQ0FBQztZQUVGLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBRXRCLENBQUM7SUFDTCxDQUFDO0lBQ0QsaUNBQWtCLEdBQWxCLFVBQW1CLElBQUk7UUFDbkIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9CLFFBQVEsQ0FBQyxNQUFNLENBQ1gsSUFBSSxDQUFDLFdBQVcsRUFDaEIsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUMxQixDQUFDO0lBQ04sQ0FBQztJQTFGTDtRQUFDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsTUFBTTtZQUNoQixXQUFXLEVBQUUsc0JBQXNCO1lBQ25DLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixDQUFDO1NBQ3RDLENBQUM7O1lBQUE7SUF1RkYsV0FBQztBQUFELENBQUMsQUFuRkQsSUFtRkM7QUFuRlksWUFBSSxPQW1GaEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgVUlEUHJvdmlkZXIgfSBmcm9tIFwiLi4vLi4vc2hhcmVkL1VJRC5Qcm92aWRlclwiO1xuXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIkxpc3RcIixcbiAgICB0ZW1wbGF0ZVVybDogXCJwYWdlcy9saXN0L2xpc3QuaHRtbFwiLFxuICAgIHN0eWxlVXJsczogWydwYWdlcy9saXN0L3N0eWxlLmNzcyddXG59KVxuXG5cblxuZXhwb3J0IGNsYXNzIExpc3QgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgcHVibGljIE5ld0l0ZW0gPSBcIlwiO1xuICAgIHB1YmxpYyBVSUQ7XG4gICAgcHVibGljIEZpcmViYXNlVXJsOiBzdHJpbmc7XG4gICAgcHVibGljIFRvRG9MaXN0OiBBcnJheTxhbnk+ID0gW107XG5cblxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBVSURQcm92aWRlcjogVUlEUHJvdmlkZXIpIHtcblxuICAgICAgICB0aGlzLlVJRCA9IHRoaXMuVUlEUHJvdmlkZXIuVUlEO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLlVJRCk7XG4gICAgICAgIHRoaXMuRmlyZWJhc2VVcmwgPSBcInVzZXJzL1wiICsgdGhpcy5VSUQ7XG5cbiAgICB9XG5cblxuICAgIG5nT25Jbml0KCkge1xuXG4gICAgICAgIHZhciBvblF1ZXJ5RXZlbnQgPSAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAvLyBub3RlIHRoYXQgdGhlIHF1ZXJ5IHJldHVybnMgMSBtYXRjaCBhdCBhIHRpbWVcbiAgICAgICAgICAgIC8vIGluIHRoZSBvcmRlciBzcGVjaWZpZWQgaW4gdGhlIHF1ZXJ5XG5cbiAgICAgICAgICAgIGlmICghcmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFdmVudCB0eXBlOiBcIiArIHJlc3VsdC50eXBlKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIktleTogXCIgKyByZXN1bHQua2V5KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQudmFsdWUudGFzaylcbiAgICAgICAgICAgICAgIC8vIHRoaXMuVG9Eb0xpc3QucHVzaChyZXN1bHQudmFsdWUudGFzaylcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJxdWVyaWVkXCIpXG4gICAgICAgIGZpcmViYXNlLnF1ZXJ5KFxuICAgICAgICAgICAgb25RdWVyeUV2ZW50LFxuICAgICAgICAgICAgdGhpcy5GaXJlYmFzZVVybCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5nbGVFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvcmRlckJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpcmViYXNlLlF1ZXJ5T3JkZXJCeVR5cGUuS0VZXG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIEFkZEl0ZW1Ub0xpc3QoKSB7XG5cbiAgICAgICAgaWYgKHRoaXMuVG9Eb0xpc3Quc29tZSh4ID0+IHggPT09IHRoaXMuTmV3SXRlbSkpIHtcblxuICAgICAgICAgICAgYWxlcnQoXCJ5b3VyIHRvIGRvIGxpc3QgYWxyZWFkeSBjb250YWlucyB0aGlzIHRhc2tcIilcblxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuTmV3SXRlbSA9PT0gXCJcIikge1xuXG4gICAgICAgICAgICBhbGVydChcIm5ldyB0YXNrIGNhbiBub3QgYmUgbnVsXCIpXG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy5Ub0RvTGlzdC5wdXNoKHRoaXMuTmV3SXRlbSlcblxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5GaXJlYmFzZVVybClcblxuICAgICAgICAgICAgZmlyZWJhc2UudXBkYXRlKFxuXG4gICAgICAgICAgICAgICAgdGhpcy5GaXJlYmFzZVVybCxcblxuICAgICAgICAgICAgICAgIHsgdGFzazogdGhpcy5Ub0RvTGlzdCB9XG5cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuTmV3SXRlbSA9IFwiXCI7XG5cbiAgICAgICAgfVxuICAgIH1cbiAgICBSZW1vdmVJdGVtRnJvbUxpc3QoaXRlbSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLlRvRG9MaXN0LmluZGV4T2YoaXRlbSlcbiAgICAgICAgdGhpcy5Ub0RvTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBmaXJlYmFzZS51cGRhdGUoXG4gICAgICAgICAgICB0aGlzLkZpcmViYXNlVXJsLFxuICAgICAgICAgICAgeyB0YXNrOiB0aGlzLlRvRG9MaXN0IH1cbiAgICAgICAgKTtcbiAgICB9XG59Il19