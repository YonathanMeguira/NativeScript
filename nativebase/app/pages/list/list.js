"use strict";
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var UID_Provider_1 = require("../../shared/UID.Provider");
var List = (function () {
    function List(UIDProvider) {
        this.UIDProvider = UIDProvider;
        this.ToDoList = [];
        this.NewItem = "";
        this.UID = this.UIDProvider.UID;
        console.log(this.UID);
        this.FirebaseUrl = "users/" + this.UID;
    }
    List.prototype.AddItemToList = function () {
        var _this = this;
        if (this.ToDoList.some(function (x) { return x === _this.NewItem; })) {
            alert("your to do list already contains this task");
        }
        else if (this.NewItem === "") {
            alert("new task can not be nul");
        }
        else {
            this.ToDoList.push(this.NewItem);
            console.log(this.FirebaseUrl);
            firebase.update(this.FirebaseUrl, { task: this.ToDoList });
            this.NewItem = "";
        }
    };
    List.prototype.RemoveItemFromList = function (item) {
        var index = this.ToDoList.indexOf(item);
        this.ToDoList.splice(index, 1);
        firebase.update(this.FirebaseUrl, { task: this.ToDoList });
    };
    List = __decorate([
        core_1.Component({
            selector: "List",
            templateUrl: "pages/list/list.html",
            styleUrls: ['pages/list/style.css']
        }), 
        __metadata('design:paramtypes', [UID_Provider_1.UIDProvider])
    ], List);
    return List;
}());
exports.List = List;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUFrQyxlQUFlLENBQUMsQ0FBQTtBQUNsRCxJQUFPLFFBQVEsV0FBVyw4QkFBOEIsQ0FBQyxDQUFDO0FBRTFELDZCQUE0QiwyQkFBMkIsQ0FBQyxDQUFBO0FBV3hEO0lBT0ksY0FBb0IsV0FBd0I7UUFBeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFMckMsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFNaEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztRQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBRTNDLENBQUM7SUFJRCw0QkFBYSxHQUFiO1FBQUEsaUJBMkJDO1FBekJHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxLQUFLLEtBQUksQ0FBQyxPQUFPLEVBQWxCLENBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFOUMsS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUE7UUFFdkQsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFN0IsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7UUFFcEMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBRUosSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBRWhDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBRTdCLFFBQVEsQ0FBQyxNQUFNLENBRVgsSUFBSSxDQUFDLFdBQVcsRUFFaEIsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUUxQixDQUFDO1lBRUYsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFFdEIsQ0FBQztJQUNMLENBQUM7SUFDRCxpQ0FBa0IsR0FBbEIsVUFBbUIsSUFBSTtRQUNuQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN2QyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsUUFBUSxDQUFDLE1BQU0sQ0FDWCxJQUFJLENBQUMsV0FBVyxFQUNoQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQzFCLENBQUM7SUFDTixDQUFDO0lBNURMO1FBQUMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLFdBQVcsRUFBRSxzQkFBc0I7WUFDbkMsU0FBUyxFQUFFLENBQUMsc0JBQXNCLENBQUM7U0FDdEMsQ0FBQzs7WUFBQTtJQXlERixXQUFDO0FBQUQsQ0FBQyxBQXJERCxJQXFEQztBQXJEWSxZQUFJLE9BcURoQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcm91dGVyXCI7XG5pbXBvcnQgeyBVSURQcm92aWRlciB9IGZyb20gXCIuLi8uLi9zaGFyZWQvVUlELlByb3ZpZGVyXCI7XG5cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiTGlzdFwiLFxuICAgIHRlbXBsYXRlVXJsOiBcInBhZ2VzL2xpc3QvbGlzdC5odG1sXCIsXG4gICAgc3R5bGVVcmxzOiBbJ3BhZ2VzL2xpc3Qvc3R5bGUuY3NzJ11cbn0pXG5cblxuXG5leHBvcnQgY2xhc3MgTGlzdCAge1xuXG4gICAgcHVibGljIFRvRG9MaXN0ID0gW107XG4gICAgcHVibGljIE5ld0l0ZW0gPSBcIlwiO1xuICAgIHB1YmxpYyBVSUQ7XG4gICAgcHVibGljIEZpcmViYXNlVXJsO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBVSURQcm92aWRlcjogVUlEUHJvdmlkZXIpIHtcblxuICAgICAgICB0aGlzLlVJRCA9IHRoaXMuVUlEUHJvdmlkZXIuVUlEO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLlVJRCk7XG4gICAgICAgIHRoaXMuRmlyZWJhc2VVcmwgPSBcInVzZXJzL1wiICsgdGhpcy5VSUQ7XG5cbiAgICB9XG4gIFxuXG5cbiAgICBBZGRJdGVtVG9MaXN0KCkge1xuXG4gICAgICAgIGlmICh0aGlzLlRvRG9MaXN0LnNvbWUoeCA9PiB4ID09PSB0aGlzLk5ld0l0ZW0pKSB7XG5cbiAgICAgICAgICAgIGFsZXJ0KFwieW91ciB0byBkbyBsaXN0IGFscmVhZHkgY29udGFpbnMgdGhpcyB0YXNrXCIpXG5cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLk5ld0l0ZW0gPT09IFwiXCIpIHtcblxuICAgICAgICAgICAgYWxlcnQoXCJuZXcgdGFzayBjYW4gbm90IGJlIG51bFwiKVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHRoaXMuVG9Eb0xpc3QucHVzaCh0aGlzLk5ld0l0ZW0pXG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuRmlyZWJhc2VVcmwpXG5cbiAgICAgICAgICAgIGZpcmViYXNlLnVwZGF0ZShcblxuICAgICAgICAgICAgICAgIHRoaXMuRmlyZWJhc2VVcmwsXG5cbiAgICAgICAgICAgICAgICB7IHRhc2s6IHRoaXMuVG9Eb0xpc3QgfVxuXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICB0aGlzLk5ld0l0ZW0gPSBcIlwiO1xuXG4gICAgICAgIH1cbiAgICB9XG4gICAgUmVtb3ZlSXRlbUZyb21MaXN0KGl0ZW0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5Ub0RvTGlzdC5pbmRleE9mKGl0ZW0pXG4gICAgICAgIHRoaXMuVG9Eb0xpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgZmlyZWJhc2UudXBkYXRlKFxuICAgICAgICAgICAgdGhpcy5GaXJlYmFzZVVybCxcbiAgICAgICAgICAgIHsgdGFzazogdGhpcy5Ub0RvTGlzdCB9XG4gICAgICAgICk7XG4gICAgfVxufSJdfQ==