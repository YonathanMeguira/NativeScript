"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var firebase = require("nativescript-plugin-firebase");
var Login = (function () {
    function Login(router) {
        this.router = router;
        this.navigationExtras = {
            queryParams: {
                "UID": this.UID
            }
        };
    }
    Login.prototype.ngOnInit = function () {
        this.IsLoggedIn = false;
    };
    Login.prototype.SignUp = function () {
        var _this = this;
        console.log(this.Email);
        firebase.createUser({
            email: this.Email,
            password: this.Password
        })
            .then(function (result) {
            _this.IsLoggedIn = true;
            _this.router.navigate(["List"], _this.navigationExtras);
        }, function (errorMessage) {
            alert({
                title: "No user created",
                message: errorMessage,
                okButtonText: "OK, got it"
            });
            _this.IsLoggedIn = false;
        });
    };
    Login.prototype.LoginFunc = function () {
        var _this = this;
        firebase.login({
            type: firebase.LoginType.PASSWORD,
            email: this.Email,
            password: this.Password
        }).then(function (result) {
            _this.UID = result.uid;
            _this.router.navigate(["List"], _this.navigationExtras);
            _this.IsLoggedIn = true;
        }, function (errorMessage) {
            console.log(errorMessage);
            _this.IsLoggedIn = false;
        });
    };
    Login.prototype.DirectAccess = function () {
        this.router.navigate(["List"]);
    };
    Login = __decorate([
        core_1.Component({
            selector: "Login",
            templateUrl: "pages/login/login.html",
            styleUrls: ['pages/login/style.css']
        }), 
        __metadata('design:paramtypes', [router_1.Router])
    ], Login);
    return Login;
}());
exports.Login = Login;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsb2dpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEscUJBQWtDLGVBQWUsQ0FBQyxDQUFBO0FBQ2xELHVCQUF5QyxpQkFBaUIsQ0FBQyxDQUFBO0FBQzNELElBQU8sUUFBUSxXQUFXLDhCQUE4QixDQUFDLENBQUM7QUFVMUQ7SUFTSSxlQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQU9sQyxxQkFBZ0IsR0FBcUI7WUFDakMsV0FBVyxFQUFFO2dCQUNULEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRzthQUNsQjtTQUNKLENBQUM7SUFYb0MsQ0FBQztJQUd2Qyx3QkFBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUE7SUFDM0IsQ0FBQztJQU9ELHNCQUFNLEdBQU47UUFBQSxpQkFxQkM7UUFwQkcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDdkIsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUNoQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQzFCLENBQUM7YUFDRyxJQUFJLENBQ0wsVUFBQyxNQUFNO1lBQ0gsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7WUFDdkIsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUUxRCxDQUFDLEVBQ0QsVUFBQyxZQUFZO1lBQ1QsS0FBSyxDQUFDO2dCQUNGLEtBQUssRUFBRSxpQkFBaUI7Z0JBQ3hCLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixZQUFZLEVBQUUsWUFBWTthQUM3QixDQUFDLENBQUE7WUFDRixLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUM1QixDQUFDLENBQ0EsQ0FBQTtJQUNULENBQUM7SUFHRCx5QkFBUyxHQUFUO1FBQUEsaUJBZ0JDO1FBZkcsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUNYLElBQUksRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVE7WUFDakMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUMxQixDQUFDLENBQUMsSUFBSSxDQUNILFVBQUMsTUFBTTtZQUNILEtBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQTtZQUNyQixLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3RELEtBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQzNCLENBQUMsRUFDRCxVQUFDLFlBQVk7WUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFCLEtBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQzVCLENBQUMsQ0FDQSxDQUFBO0lBQ1QsQ0FBQztJQUVELDRCQUFZLEdBQVo7UUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQXhFTDtRQUFDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsT0FBTztZQUNqQixXQUFXLEVBQUUsd0JBQXdCO1lBQ3JDLFNBQVMsRUFBRSxDQUFDLHVCQUF1QixDQUFDO1NBQ3ZDLENBQUM7O2FBQUE7SUF1RUYsWUFBQztBQUFELENBQUMsQUFwRUQsSUFvRUM7QUFwRVksYUFBSyxRQW9FakIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFJvdXRlciwgTmF2aWdhdGlvbkV4dHJhcyB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xuXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiBcIkxvZ2luXCIsXG4gICAgdGVtcGxhdGVVcmw6IFwicGFnZXMvbG9naW4vbG9naW4uaHRtbFwiLFxuICAgIHN0eWxlVXJsczogWydwYWdlcy9sb2dpbi9zdHlsZS5jc3MnXVxufSlcblxuXG5leHBvcnQgY2xhc3MgTG9naW4gaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgRW1haWw7XG4gICAgUGFzc3dvcmQ7XG4gICAgSXNMb2dnZWRJbjtcbiAgICBVSUQ7XG5cblxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikgeyB9XG5cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLklzTG9nZ2VkSW4gPSBmYWxzZVxuICAgIH1cblxuICAgIG5hdmlnYXRpb25FeHRyYXM6IE5hdmlnYXRpb25FeHRyYXMgPSB7XG4gICAgICAgIHF1ZXJ5UGFyYW1zOiB7XG4gICAgICAgICAgICBcIlVJRFwiOiB0aGlzLlVJRFxuICAgICAgICB9XG4gICAgfTtcbiAgICBTaWduVXAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuRW1haWwpXG4gICAgICAgIGZpcmViYXNlLmNyZWF0ZVVzZXIoe1xuICAgICAgICAgICAgZW1haWw6IHRoaXMuRW1haWwsXG4gICAgICAgICAgICBwYXNzd29yZDogdGhpcy5QYXNzd29yZFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5Jc0xvZ2dlZEluID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCJMaXN0XCJdLCB0aGlzLm5hdmlnYXRpb25FeHRyYXMpO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycm9yTWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIGFsZXJ0KHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiTm8gdXNlciBjcmVhdGVkXCIsXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgb2tCdXR0b25UZXh0OiBcIk9LLCBnb3QgaXRcIlxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgdGhpcy5Jc0xvZ2dlZEluID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgfVxuXG5cbiAgICBMb2dpbkZ1bmMoKSB7XG4gICAgICAgIGZpcmViYXNlLmxvZ2luKHtcbiAgICAgICAgICAgIHR5cGU6IGZpcmViYXNlLkxvZ2luVHlwZS5QQVNTV09SRCxcbiAgICAgICAgICAgIGVtYWlsOiB0aGlzLkVtYWlsLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuUGFzc3dvcmRcbiAgICAgICAgfSkudGhlbihcbiAgICAgICAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLlVJRCA9IHJlc3VsdC51aWRcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCJMaXN0XCJdLCB0aGlzLm5hdmlnYXRpb25FeHRyYXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuSXNMb2dnZWRJbiA9IHRydWU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycm9yTWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5Jc0xvZ2dlZEluID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgfVxuXG4gICAgRGlyZWN0QWNjZXNzKCkge1xuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCJMaXN0XCJdKTtcbiAgICB9XG5cblxufSJdfQ==