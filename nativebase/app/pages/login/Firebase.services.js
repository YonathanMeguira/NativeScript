"use strict";
var core_1 = require('@angular/core');
var firebase = require("nativescript-plugin-firebase");
var router_1 = require("@angular/router");
var Rx_1 = require("rxjs/Rx");
var FirebaseServices = (function () {
    function FirebaseServices(router) {
        this.router = router;
        this.task = [];
    }
    FirebaseServices.prototype.Login = function (Email, Password) {
        var _this = this;
        firebase.login({
            type: firebase.LoginType.PASSWORD,
            email: Email,
            password: Password
        })
            .then(function (res) {
            _this.FirebaseUrl = "users/" + res.uid;
            _this.router.navigate(["List"]);
            return _this.FirebaseUrl;
        })
            .then(function (FirebaseURL) {
            _this.GetData(FirebaseURL);
        }, function (error) {
            alert("this account is not recognized...");
        });
    };
    ;
    FirebaseServices.prototype.GetData = function (FBURL) {
        var _this = this;
        var onQueryEvent = function (result) {
            if (!result.error) {
                var tasks = result.value.task;
                console.log(tasks);
                _this.ToDos = new Rx_1.Observable(function (observer) {
                    observer.next(tasks);
                    observer.complete();
                });
                var subscription = _this.ToDos.subscribe(function (value) { return _this.task.push(value); }, function (error) { return _this.anyErrors = true; }, function () { return _this.finished = true; });
            }
            else {
                console.log("an error occured");
            }
        };
        firebase.query(onQueryEvent, FBURL, {
            singleEvent: true,
            orderBy: {
                type: firebase.QueryOrderByType.KEY
            }
        });
    };
    FirebaseServices.prototype.SignUp = function (Email, Password) {
        firebase.createUser({
            email: Email,
            password: Password
        });
    };
    FirebaseServices = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [router_1.Router])
    ], FirebaseServices);
    return FirebaseServices;
}());
exports.FirebaseServices = FirebaseServices;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlyZWJhc2Uuc2VydmljZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJGaXJlYmFzZS5zZXJ2aWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEscUJBQTJCLGVBQWUsQ0FBQyxDQUFBO0FBQzNDLElBQU8sUUFBUSxXQUFXLDhCQUE4QixDQUFDLENBQUM7QUFDMUQsdUJBQXVCLGlCQUFpQixDQUFDLENBQUE7QUFDekMsbUJBQTJCLFNBQVMsQ0FBQyxDQUFBO0FBSXJDO0lBU0ksMEJBQW9CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBSDNCLFNBQUksR0FBZSxFQUFFLENBQUM7SUFLN0IsQ0FBQztJQUVELGdDQUFLLEdBQUwsVUFBTSxLQUFLLEVBQUUsUUFBUTtRQUFyQixpQkFvQkM7UUFsQkcsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUNYLElBQUksRUFBRSxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVE7WUFDakMsS0FBSyxFQUFFLEtBQUs7WUFDWixRQUFRLEVBQUUsUUFBUTtTQUNyQixDQUFDO2FBQ0csSUFBSSxDQUFDLFVBQUEsR0FBRztZQUNMLEtBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUM7WUFDdEMsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQy9CLE1BQU0sQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDO1FBQzVCLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxVQUFDLFdBQVc7WUFDZCxLQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlCLENBQUMsRUFDRCxVQUFBLEtBQUs7WUFDRCxLQUFLLENBQUMsbUNBQW1DLENBQUMsQ0FBQztRQUMvQyxDQUFDLENBQUMsQ0FBQTtJQUdWLENBQUM7O0lBRUQsa0NBQU8sR0FBUCxVQUFRLEtBQUs7UUFBYixpQkE4QkM7UUE1QkcsSUFBSSxZQUFZLEdBQUcsVUFBQyxNQUFNO1lBQ3RCLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2hCLElBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNuQixLQUFJLENBQUMsS0FBSyxHQUFHLElBQUksZUFBVSxDQUFDLFVBQUEsUUFBUTtvQkFDaEMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDckIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN4QixDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLFlBQVksR0FBRyxLQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FDbkMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBckIsQ0FBcUIsRUFDOUIsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFJLENBQUMsU0FBUyxHQUFHLElBQUksRUFBckIsQ0FBcUIsRUFDOUIsY0FBTSxPQUFBLEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxFQUFwQixDQUFvQixDQUM3QixDQUFDO1lBQ04sQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtZQUNuQyxDQUFDO1FBQ0wsQ0FBQyxDQUFBO1FBRUQsUUFBUSxDQUFDLEtBQUssQ0FDVixZQUFZLEVBQ1osS0FBSyxFQUNMO1lBQ0ksV0FBVyxFQUFFLElBQUk7WUFDakIsT0FBTyxFQUFFO2dCQUNMLElBQUksRUFBRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsR0FBRzthQUN0QztTQUNKLENBQ0osQ0FBQTtJQUNMLENBQUM7SUFHRCxpQ0FBTSxHQUFOLFVBQU8sS0FBSyxFQUFFLFFBQVE7UUFDbEIsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUNoQixLQUFLLEVBQUUsS0FBSztZQUNaLFFBQVEsRUFBRSxRQUFRO1NBQ3JCLENBQUMsQ0FBQTtJQUVOLENBQUM7SUE1RUw7UUFBQyxpQkFBVSxFQUFFOzt3QkFBQTtJQThFYix1QkFBQztBQUFELENBQUMsQUE1RUQsSUE0RUM7QUE1RVksd0JBQWdCLG1CQTRFNUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL1J4XCI7XG5cbkBJbmplY3RhYmxlKClcblxuZXhwb3J0IGNsYXNzIEZpcmViYXNlU2VydmljZXMge1xuXG5cblxuICAgIHB1YmxpYyBGaXJlYmFzZVVybDogYW55O1xuICAgIHB1YmxpYyBUb0RvczogT2JzZXJ2YWJsZTxBcnJheTxzdHJpbmc+PjtcbiAgICBwdWJsaWMgdGFzazogQXJyYXk8YW55PiA9IFtdO1xuICAgIHByaXZhdGUgYW55RXJyb3JzOiBib29sZWFuO1xuICAgIHByaXZhdGUgZmluaXNoZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xuXG4gICAgfVxuXG4gICAgTG9naW4oRW1haWwsIFBhc3N3b3JkKSB7XG5cbiAgICAgICAgZmlyZWJhc2UubG9naW4oe1xuICAgICAgICAgICAgdHlwZTogZmlyZWJhc2UuTG9naW5UeXBlLlBBU1NXT1JELFxuICAgICAgICAgICAgZW1haWw6IEVtYWlsLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IFBhc3N3b3JkXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuRmlyZWJhc2VVcmwgPSBcInVzZXJzL1wiICsgcmVzLnVpZDtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXCJMaXN0XCJdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5GaXJlYmFzZVVybDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigoRmlyZWJhc2VVUkwpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLkdldERhdGEoRmlyZWJhc2VVUkwpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICBhbGVydChcInRoaXMgYWNjb3VudCBpcyBub3QgcmVjb2duaXplZC4uLlwiKTtcbiAgICAgICAgICAgIH0pXG5cblxuICAgIH07XG5cbiAgICBHZXREYXRhKEZCVVJMKSB7XG5cbiAgICAgICAgdmFyIG9uUXVlcnlFdmVudCA9IChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmICghcmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhc2tzID0gcmVzdWx0LnZhbHVlLnRhc2s7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codGFza3MpO1xuICAgICAgICAgICAgICAgIHRoaXMuVG9Eb3MgPSBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodGFza3MpO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGxldCBzdWJzY3JpcHRpb24gPSB0aGlzLlRvRG9zLnN1YnNjcmliZShcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPT4gdGhpcy50YXNrLnB1c2godmFsdWUpLFxuICAgICAgICAgICAgICAgICAgICBlcnJvciA9PiB0aGlzLmFueUVycm9ycyA9IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHRoaXMuZmluaXNoZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJhbiBlcnJvciBvY2N1cmVkXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmaXJlYmFzZS5xdWVyeShcbiAgICAgICAgICAgIG9uUXVlcnlFdmVudCxcbiAgICAgICAgICAgIEZCVVJMLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmdsZUV2ZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIG9yZGVyQnk6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZmlyZWJhc2UuUXVlcnlPcmRlckJ5VHlwZS5LRVlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIClcbiAgICB9XG5cblxuICAgIFNpZ25VcChFbWFpbCwgUGFzc3dvcmQpIHtcbiAgICAgICAgZmlyZWJhc2UuY3JlYXRlVXNlcih7XG4gICAgICAgICAgICBlbWFpbDogRW1haWwsXG4gICAgICAgICAgICBwYXNzd29yZDogUGFzc3dvcmRcbiAgICAgICAgfSlcblxuICAgIH1cblxufSJdfQ==