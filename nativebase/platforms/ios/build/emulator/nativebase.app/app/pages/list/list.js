"use strict";
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var UID_Provider_1 = require("../../shared/UID.Provider");
var task_service_1 = require("./task.service");
var List = (function () {
    function List(UIDProvider, TaskService) {
        this.UIDProvider = UIDProvider;
        this.TaskService = TaskService;
        this.NewItem = "";
    }
    List.prototype.ngOnInit = function () {
        this.ToDoList = ["coucou", "lolo", "caca"];
        this.UID = this.UIDProvider.UID;
        this.FirebaseUrl = "users/" + this.UID;
        console.log("init url");
        console.log(this.FirebaseUrl);
        //this.TaskService.GetTasks(this.FirebaseUrl)
        console.log("watch out..");
        console.log(this.ToDoList);
    };
    List.prototype.AddItemToList = function () {
        var _this = this;
        if (this.ToDoList.some(function (x) { return x === _this.NewItem; })) {
            alert("your to do list already contains this task");
        }
        else if (this.NewItem === "") {
            alert("new task can not be nul");
        }
        else {
            this.ToDoList.push(this.NewItem);
            firebase.update(this.FirebaseUrl, { task: this.ToDoList });
            this.NewItem = "";
        }
    };
    ;
    List.prototype.RemoveItemFromList = function (item) {
        var index = this.ToDoList.indexOf(item);
        this.ToDoList.splice(index, 1);
        firebase.update(this.FirebaseUrl, { task: this.ToDoList });
    };
    List = __decorate([
        core_1.Component({
            selector: "List",
            templateUrl: "pages/list/list.html",
            styleUrls: ['pages/list/style.css'],
            providers: [UID_Provider_1.UIDProvider, task_service_1.TaskService]
        }), 
        __metadata('design:paramtypes', [UID_Provider_1.UIDProvider, task_service_1.TaskService])
    ], List);
    return List;
}());
exports.List = List;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFCQUFrQyxlQUFlLENBQUMsQ0FBQTtBQUNsRCxJQUFPLFFBQVEsV0FBVyw4QkFBOEIsQ0FBQyxDQUFDO0FBRTFELDZCQUE0QiwyQkFBMkIsQ0FBQyxDQUFBO0FBQ3hELDZCQUE0QixnQkFBZ0IsQ0FBQyxDQUFBO0FBYTdDO0lBT0ksY0FBb0IsV0FBd0IsRUFBVSxXQUF3QjtRQUExRCxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUFVLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBTHZFLFlBQU8sR0FBRyxFQUFFLENBQUM7SUFLNkQsQ0FBQztJQUdsRix1QkFBUSxHQUFSO1FBRUksSUFBSSxDQUFDLFFBQVEsR0FBRSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUcsTUFBTSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztRQUNoQyxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDN0IsNkNBQTZDO1FBRTdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUE7UUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7SUFFOUIsQ0FBQztJQUVELDRCQUFhLEdBQWI7UUFBQSxpQkFhQztRQVpHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxLQUFLLEtBQUksQ0FBQyxPQUFPLEVBQWxCLENBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUMsS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUE7UUFDdkQsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDN0IsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUE7UUFDcEMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ2hDLFFBQVEsQ0FBQyxNQUFNLENBQ1gsSUFBSSxDQUFDLFdBQVcsRUFDaEIsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUMxQixDQUFDO1lBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDdEIsQ0FBQztJQUNMLENBQUM7O0lBSUQsaUNBQWtCLEdBQWxCLFVBQW1CLElBQUk7UUFDbkIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQy9CLFFBQVEsQ0FBQyxNQUFNLENBQ1gsSUFBSSxDQUFDLFdBQVcsRUFDaEIsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUMxQixDQUFDO0lBQ04sQ0FBQztJQTFETDtRQUFDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsTUFBTTtZQUNoQixXQUFXLEVBQUUsc0JBQXNCO1lBQ25DLFNBQVMsRUFBRSxDQUFDLHNCQUFzQixDQUFDO1lBQ25DLFNBQVMsRUFBRSxDQUFDLDBCQUFXLEVBQUUsMEJBQVcsQ0FBQztTQUV4QyxDQUFDOztZQUFBO0lBc0RGLFdBQUM7QUFBRCxDQUFDLEFBbERELElBa0RDO0FBbERZLFlBQUksT0FrRGhCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgZmlyZWJhc2UgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZVwiKTtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbmltcG9ydCB7IFVJRFByb3ZpZGVyIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9VSUQuUHJvdmlkZXJcIjtcbmltcG9ydCB7IFRhc2tTZXJ2aWNlIH0gZnJvbSBcIi4vdGFzay5zZXJ2aWNlXCI7XG5cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiTGlzdFwiLFxuICAgIHRlbXBsYXRlVXJsOiBcInBhZ2VzL2xpc3QvbGlzdC5odG1sXCIsXG4gICAgc3R5bGVVcmxzOiBbJ3BhZ2VzL2xpc3Qvc3R5bGUuY3NzJ10sXG4gICAgcHJvdmlkZXJzOiBbVUlEUHJvdmlkZXIsIFRhc2tTZXJ2aWNlXVxuXG59KVxuXG5cblxuZXhwb3J0IGNsYXNzIExpc3QgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgcHVibGljIE5ld0l0ZW0gPSBcIlwiO1xuICAgIHB1YmxpYyBVSUQ7XG4gICAgcHVibGljIEZpcmViYXNlVXJsOiBzdHJpbmc7XG4gICAgcHVibGljIFRvRG9MaXN0IDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgVUlEUHJvdmlkZXI6IFVJRFByb3ZpZGVyLCBwcml2YXRlIFRhc2tTZXJ2aWNlOiBUYXNrU2VydmljZSkge31cblxuXG4gICAgbmdPbkluaXQoKSB7XG5cbiAgICAgICAgdGhpcy5Ub0RvTGlzdD0gW1wiY291Y291XCIsIFwibG9sb1wiICwgXCJjYWNhXCJdO1xuICAgICAgICB0aGlzLlVJRCA9IHRoaXMuVUlEUHJvdmlkZXIuVUlEO1xuICAgICAgICB0aGlzLkZpcmViYXNlVXJsID0gXCJ1c2Vycy9cIiArIHRoaXMuVUlEO1xuICAgICAgICBjb25zb2xlLmxvZyhcImluaXQgdXJsXCIpXG4gICAgICAgIGNvbnNvbGUubG9nKHRoaXMuRmlyZWJhc2VVcmwpXG4gICAgICAgIC8vdGhpcy5UYXNrU2VydmljZS5HZXRUYXNrcyh0aGlzLkZpcmViYXNlVXJsKVxuXG4gICAgICAgIGNvbnNvbGUubG9nKFwid2F0Y2ggb3V0Li5cIilcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5Ub0RvTGlzdClcblxuICAgIH1cblxuICAgIEFkZEl0ZW1Ub0xpc3QoKSB7XG4gICAgICAgIGlmICh0aGlzLlRvRG9MaXN0LnNvbWUoeCA9PiB4ID09PSB0aGlzLk5ld0l0ZW0pKSB7XG4gICAgICAgICAgICBhbGVydChcInlvdXIgdG8gZG8gbGlzdCBhbHJlYWR5IGNvbnRhaW5zIHRoaXMgdGFza1wiKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuTmV3SXRlbSA9PT0gXCJcIikge1xuICAgICAgICAgICAgYWxlcnQoXCJuZXcgdGFzayBjYW4gbm90IGJlIG51bFwiKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5Ub0RvTGlzdC5wdXNoKHRoaXMuTmV3SXRlbSlcbiAgICAgICAgICAgIGZpcmViYXNlLnVwZGF0ZShcbiAgICAgICAgICAgICAgICB0aGlzLkZpcmViYXNlVXJsLFxuICAgICAgICAgICAgICAgIHsgdGFzazogdGhpcy5Ub0RvTGlzdCB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5OZXdJdGVtID0gXCJcIjtcbiAgICAgICAgfVxuICAgIH07XG5cblxuXG4gICAgUmVtb3ZlSXRlbUZyb21MaXN0KGl0ZW0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5Ub0RvTGlzdC5pbmRleE9mKGl0ZW0pXG4gICAgICAgIHRoaXMuVG9Eb0xpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgZmlyZWJhc2UudXBkYXRlKFxuICAgICAgICAgICAgdGhpcy5GaXJlYmFzZVVybCxcbiAgICAgICAgICAgIHsgdGFzazogdGhpcy5Ub0RvTGlzdCB9XG4gICAgICAgICk7XG4gICAgfVxuXG59Il19